<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated/>
<#
    int maxArgs = 8;
#>
namespace NStandard
{
    public static class StructTuple
    {
<#
    for (int i = 2; i <= maxArgs; i++)
    {
#>
        <#=Code_StructTupleCreator(i)#>
<#
    }
#>
    }

<#
    for (int i = 2; i <= maxArgs; i++)
    {
#>
    <#=Code_StructTuple(i)#>
<#
    }
#>
}

<#+
private string Code_StructTupleCreator(int argc)
{
    var indices = GetIndices(argc);
    var genericsCode = string.Join(", ", indices.Select(i => $"T{i}"));

    var summary = @"/// <summary>
        /// Create a tuple of structs.
        /// </summary>";

    var sb = new StringBuilder();

    sb.AppendLine(summary);
    sb.Append($"{Tabs(2)}public static StructTuple<{genericsCode}> Create<{genericsCode}>(");
    for (int i = 1; i <= argc; i++)
    {
        sb.Append($"T{i} item{i}, ");
    }
    sb.Length -= 2;
    sb.Append(")");

    sb.Append($" => new StructTuple<{genericsCode}>(");
    for (int i = 1; i <= argc; i++)
    {
        sb.Append($"item{i}, ");
    }
    sb.Length -= 2;
    sb.Append(");");

    return sb.ToString();
}

private string Code_StructTuple(int argc)
{
    var indices = GetIndices(argc);
    var genericsCode = string.Join(", ", indices.Select(i => $"T{i}"));

    var sb = new StringBuilder();

    sb.AppendLine($"public struct StructTuple<{genericsCode}>");
    sb.AppendLine($"{Tabs(1)}{{");
    for (int i = 1; i <= argc; i++)
    {
        sb.AppendLine($"{Tabs(2)}public T{i} Item{i};");
    }
    sb.AppendLine("");

    sb.Append($"{Tabs(2)}public StructTuple(");
    for (int i = 1; i <= argc; i++)
    {
        sb.Append($"T{i} item{i}, ");
    }
    sb.Length -= 2;
    sb.AppendLine(")");
    
    sb.AppendLine($"{Tabs(2)}{{");
    for (int i = 1; i <= argc; i++)
    {
        sb.AppendLine($"{Tabs(3)}Item{i} = item{i};");
    }
    sb.AppendLine($"{Tabs(2)}}}");
    sb.AppendLine();
    
    
    sb.Append($"{Tabs(2)}public void Deconstruct(");
    for (int i = 1; i <= argc; i++)
    {
        sb.Append($"out T{i} item{i}, ");
    }
    sb.Length -= 2;
    sb.AppendLine(")");
    
    sb.AppendLine($"{Tabs(2)}{{");
    for (int i = 1; i <= argc; i++)
    {
        sb.AppendLine($"{Tabs(3)}item{i} = Item{i};");
    }
    sb.AppendLine($"{Tabs(2)}}}");

    sb.AppendLine($"{Tabs(1)}}}");

    /*
    public struct StructTuple2<TItem>
    {
        public TItem Item1;
        public TItem Item2;

        public ElementTuple2(TItem item1, TItem item2)
        {
            Item1 = item1;
            Item2 = item2;
        }

        public void Deconstruct(out TItem item1, out TItem item2)
        {
            item1 = Item1;
            item2 = Item2;
        }
    }
    */

    return sb.ToString();
}

private string Tabs(int count)
{
    var sb = new StringBuilder();
    for (int i = 0; i < count; i++)
    {
        sb.Append("    ");
    }
    return sb.ToString();
}

private IEnumerable<int> GetIndices(int argc)
{
    for (int i = 1; i <= argc; i++)
    {
        yield return i;
    }
}
#>
