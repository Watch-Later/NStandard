<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated/>
<#
    int maxArgs = 8;
#>
using System;
using System.Collections.Generic;
using System.Linq;

namespace NStandard
{
    public static partial class Any
    {
        #region ValueTuple
#if NET5_0_OR_GREATER || NETSTANDARD2_0_OR_GREATER
<#
    for(int t = 1; t <= maxArgs; t++)
    {
#>
        <#=Code_Zip(t)#>
<#
    }
#>
#endif
        #endregion

        #region with Selector
<#
    var frameworkMaxArgs = Math.Min(4, maxArgs);
    for(int t = 1; t <= frameworkMaxArgs; t++)
    {
#>
        <#=Code_ZipWithSelector(t)#>
<#
    }
#>

#if NET5_0_OR_GREATER || NETSTANDARD2_0_OR_GREATER || NET40_OR_GREATER
<#
    for(int t = frameworkMaxArgs + 1; t <= maxArgs; t++)
    {
#>
        <#=Code_ZipWithSelector(t)#>
<#
    }
#>
#endif
        #endregion
    }
}

<#+
private string Code_Zip(int argc)
{
    var summary = @"/// <summary>
        ///    Produces a sequence of tuples with elements from the specified sequences.
        /// </summary>";

    if (argc > 1)
    {
        var generics = Code_Generics(argc);
        var genericsCode = string.Join(", ", generics.Select(i => $"T{i}"));

        return $@"{summary}
        public static IEnumerable<({genericsCode})> Zip<{genericsCode}>(
            {string.Join($",{Environment.NewLine}{Tabs(3)}", generics.Select(i => $"IEnumerable<T{i}> arg{i}"))}
        )
        {{
            {string.Join($"{Environment.NewLine}{Tabs(3)}", generics.Select(i => $"using IEnumerator<T{i}> e{i} = arg{i}.GetEnumerator();"))}

            while ({string.Join($"{Environment.NewLine}{Tabs(4)}&& ", generics.Select(i => $"e{i}.MoveNext()"))})
            {{
                yield return (
                    {string.Join($",{Environment.NewLine}{Tabs(5)}", generics.Select(i => $"e{i}.Current"))}
                );
            }}
        }}";
    }
    else
    {
        return $@"{summary}
        public static IEnumerable<IEnumerable<T1>> Zip<T1>(IEnumerable<IEnumerable<T1>> args)
        {{
            IEnumerator<T1>[] enumerators = args.Select(x => x.GetEnumerator()).ToArray();
            while (enumerators.All(x => x.MoveNext()))
            {{
                yield return enumerators.Select(e => e.Current);
            }}
        }}";
    }
}

private string Code_ZipWithSelector(int argc)
{
    var summary = $@"/// <summary>
        ///    Applies a specified function to the corresponding elements of many sequences,
        ///    producing a sequence of the results.
        /// </summary>";

    if (argc > 1)
    {
        var generics = Code_Generics(argc);
        var genericsCode = string.Join(", ", generics.Select(i => $"T{i}"));

        return $@"{summary}
        public static IEnumerable<TRet> Zip<{genericsCode}, TRet>(
            {string.Join($",{Environment.NewLine}{Tabs(3)}", generics.Select(i => $"IEnumerable<T{i}> arg{i}"))},
            Func<{genericsCode}, TRet> resultSelector
        )
        {{
            {string.Join($"{Environment.NewLine}{Tabs(3)}", generics.Select(i => $"using IEnumerator<T{i}> e{i} = arg{i}.GetEnumerator();"))}

            while ({string.Join($"{Environment.NewLine}{Tabs(4)}&& ", generics.Select(i => $"e{i}.MoveNext()"))})
            {{
                yield return resultSelector(
                    {string.Join($",{Environment.NewLine}{Tabs(5)}", generics.Select(i => $"e{i}.Current"))}
                );
            }}
        }}";
    }
    else
    {
        return $@"{summary}
        public static IEnumerable<TRet> Zip<T1, TRet>(IEnumerable<IEnumerable<T1>> args, Func<IEnumerable<T1>, TRet> resultSelector)
        {{
            IEnumerator<T1>[] enumerators = args.Select(x => x.GetEnumerator()).ToArray();
            while (enumerators.All(x => x.MoveNext()))
            {{
                yield return resultSelector(enumerators.Select(e => e.Current));
            }}
        }}";
    }
}

private string Tabs(int count)
{
    var sb = new StringBuilder();
    for (int i = 0; i < count; i++)
    {
        sb.Append("    ");
    }
    return sb.ToString();
}

private IEnumerable<int> Code_Generics(int argc)
{
    for (int i = 1; i <= argc; i++)
    {
        yield return i;
    }
}
#>
